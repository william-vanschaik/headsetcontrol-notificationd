#!/usr/bin/python3

# HeadsetControl-Notificationd
# 
# This program is free software: you can redistribute it and/or modify  
# it under the terms of the GNU General Public License as published by  
# the Free Software Foundation, version 3.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License 
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import os, time, subprocess, datetime

config = {
	"thresholdWarning" : 30,
	"thresholdEmpty" : 10,
	"pollingInterval" : 3,
	"debug" : True
}
knownDevices = {}


def stateChanged(name, newState):
	if (knownDevices[name]['battery'] != newState):
		oldState = knownDevices[name]['battery']
		
		# When device is turned off (Unavailable) or charging do not set int state, just send a notification
		if (newState == "Unavailable"):
			sendNotification(name, "disconnected!", "headset")
		elif (newState == "Charging"):
			sendNotification(name, "Charger connected!", "battery")
		# This should just be a change in battery percentage so parse the new state as an int
		else:
			newStateInt = int(newState)
			# Check if previous state was disconnecct or charging if so send a notification
			if (oldState == "Unavailable"):
				sendNotification(name, "connected!", "headset")
				oldStateInt = 0
			elif (oldState == "Charging"):
				sendNotification(name, "Charger disconnected!", "battery")
				oldStateInt = 100
			else:
				oldStateInt = int(oldState)

			if (config['debug']):
				print(str("Old state int: " + str(oldStateInt)))
				print(str("New state int: " + str(newStateInt)))

			# Show warning if the battery is empty
			if (newStateInt < config['thresholdEmpty'] and oldStateInt >= config['thresholdEmpty']):
				sendNotification(name, "Battery level " + str(newStateInt) + "%", "battery-low")

			else:
				# Show warning if the battery is low
				if (newStateInt < config['thresholdWarning'] and oldStateInt >= config['thresholdWarning']):
					sendNotification(name, "Battery level " + str(newStateInt) + "%", "battery-caution")
				else:
					# Only show battery level, if the last state was Charging
					if (oldState == "Charging"):
						sendNotification(name, "Battery level "  + str(newStateInt) + "%", "battery")
	
	knownDevices[name]['battery'] = newState


def sendNotification(name, text, icon):
	if (config['debug']):
		print( "Sending Notification: " + text )
	subprocess.call(["notify-send", name+" "+text , "--icon=" +icon])



while (True):
	if (config['debug']):
		now = datetime.datetime.now()
		print( str(now) + " : Polling...")
	hscOutput = os.popen("headsetcontrol -b").read()
	hscOutputSplit = hscOutput.split("Found ")
	if (len(hscOutputSplit) > 1):
		hscData = hscOutputSplit[1].split("\n")
		hscData[0] = hscData[0].split( "!")[0]
		name = hscData[0]

		# Parse battery level
		stateParse = hscData[1].split(": ")
		if (len(stateParse) > 1):
			state = stateParse[1].replace("%", "").strip()

			if (name in knownDevices):
				stateChanged(name, state)
			else:
				knownDevices[name] = {
					"battery" : state
				}

			if (config['debug']):
				print(str(knownDevices))
	time.sleep(config['pollingInterval'])


